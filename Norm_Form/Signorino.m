(* ::Package:: *)

(* ::Input:: *)
(*(*Signorino's Strategic Selection Models Implementation*)(*Based on "Strategy and Selection in International Relations" (2002)*)(* ========================================================*)(*UTILITY FUNCTIONS*)(* ========================================================*)(*Cumulative standard normal distribution*)*)
(*\[CapitalPhi]N[x_]:=CDF[NormalDistribution[0,1],x];*)
(**)
(*(*Cumulative bivariate normal distribution*)*)
(*\[CapitalPhi]BN[x_,y_,\[Rho]_]:=CDF[BinormalDistribution[{0,0},{1,1},\[Rho]],{x,y}];*)
(**)
(*(* ========================================================*)*)
(*(*MODEL 1:BIVARIATE PROBIT WITH LINEAR LATENT VARIABLES*)*)
(*(* ========================================================*)*)
(**)
(*(*The most commonly implemented selection model for binary data*)*)
(*(*Implements Equations 3-5 from Signorino's paper*)*)
(**)
(*BivariateProbabilities[X1_,\[Beta]1_,X2_,\[Beta]2_,\[Rho]_]:=Module[{},(*Compute X1*\[Beta]1 and X2*\[Beta]2*)X1\[Beta]1=X1 . \[Beta]1;*)
(*X2\[Beta]2=X2 . \[Beta]2;*)
(*(*Calculate probabilities using Equations 3-5*)pY1_ 0=\[CapitalPhi]N[-X1\[Beta]1];*)
(*pY1_ 1_Y2 _ 0=\[CapitalPhi]BN[X1\[Beta]1,-X2\[Beta]2,-\[Rho]];*)
(*pY1_ 1_Y2 _ 1=\[CapitalPhi]BN[X1\[Beta]1,X2\[Beta]2,\[Rho]];*)
(*(*Return probabilities*){pY1_ 0,pY1_ 1_Y2 _ 0,pY1_ 1_Y2 _ 1}];*)
(**)
(*(*Likelihood function for bivariate probit model*)*)
(*BivariateProbitLikelihood[data_,\[Beta]1_,\[Beta]2_,\[Rho]_]:=Module[{likelihood=0},(*For each observation in data*)Do[(*Extract data*){y1,y2,X1,X2}=data[[i]];*)
(*(*Calculate probabilities*){pY1_ 0,pY1_ 1_Y2 _ 0,pY1_ 1_Y2 _ 1}=BivariateProbabilities[X1,\[Beta]1,X2,\[Beta]2,\[Rho]];*)
(*(*Add to log-likelihood*)If[y1==0,likelihood+=Log[pY1_ 0],If[y2==0,likelihood+=Log[pY1_ 1_Y2 _ 0],likelihood+=Log[pY1_ 1_Y2 _ 1]]],{i,1,Length[data]}];*)
(*likelihood];*)
(**)
(*(*Estimation function for bivariate probit model*)*)
(*EstimateBivariateProbit[data_]:=Module[{k1,k2,initialParams,constraints,result},(*Get dimensions of parameter vectors*)k1=Length[data[[1,3]]];(*Number of parameters in \[Beta]1*)k2=Length[data[[1,4]]];(*Number of parameters in \[Beta]2*)(*Initial parameter values*)initialParams=Join[ConstantArray[0,k1],ConstantArray[0,k2],{0}];*)
(*(*Constraints on \[Rho]*)constraints={-0.99<=#[[(k1+k2+1)]]<=0.99}&;*)
(*(*Maximize the log-likelihood function*)result=FindMaximum[{BivariateProbitLikelihood[data,#[[1;;k1]],#[[(k1+1);;(k1+k2)]],#[[(k1+k2+1)]]]&[{vars}],constraints[{vars}]},{vars,initialParams},Method->"NelderMead"];*)
(*(*Extract estimated parameters*){result[[1]],(*Maximized log-likelihood*){result[[2,1,2,1;;k1]],(*Estimated \[Beta]1*)result[[2,1,2,(k1+1);;(k1+k2)]],(*Estimated \[Beta]2*)result[[2,1,2,(k1+k2+1)]] (*Estimated \[Rho]*)}}];*)
(**)
(*(* ========================================================*)*)
(*(*MODEL 2:INDEPENDENT STRATEGIC MODEL*)*)
(*(* ========================================================*)*)
(**)
(*(*Strategic model with independent errors*)*)
(*(*Implements Equations 8-12 from Signorino's paper*)*)
(**)
(*StrategicIndependentProbabilities[U11_,U13_,U14_,U23_,U24_]:=Module[{p3,p4},(*Calculate p3 and p4 using Equations 11-12*)p3=\[CapitalPhi]N[U23-U24];*)
(*p4=\[CapitalPhi]N[U24-U23];*)
(*(*Calculate probabilities using Equations 8-10*)pY1_ 0=\[CapitalPhi]N[U11-(p3*U13+p4*U14)];*)
(*pY1_ 1_Y2 _ 0=\[CapitalPhi]N[(p3*U13+p4*U14)-U11]*\[CapitalPhi]N[U23-U24];*)
(*pY1_ 1_Y2 _ 1=\[CapitalPhi]N[(p3*U13+p4*U14)-U11]*\[CapitalPhi]N[U24-U23];*)
(*(*Return probabilities*){pY1_ 0,pY1_ 1_Y2 _ 0,pY1_ 1_Y2 _ 1}];*)
(**)
(*(*Function to compute utilities from regressors*)*)
(*ComputeUtilities[X11_,\[Beta]11_,X13_,\[Beta]13_,X14_,\[Beta]14_,X23_,\[Beta]23_,X24_,\[Beta]24_]:=Module[{},U11=X11 . \[Beta]11;*)
(*U13=X13 . \[Beta]13;*)
(*U14=X14 . \[Beta]14;*)
(*U23=X23 . \[Beta]23;*)
(*U24=X24 . \[Beta]24;*)
(*{U11,U13,U14,U23,U24}];*)
(**)
(*(*Likelihood function for independent strategic model*)*)
(*StrategicIndependentLikelihood[data_,\[Beta]11_,\[Beta]13_,\[Beta]14_,\[Beta]23_,\[Beta]24_]:=Module[{likelihood=0},(*For each observation in data*)Do[(*Extract data*){y1,y2,X11,X13,X14,X23,X24}=data[[i]];*)
(*(*Compute utilities*){U11,U13,U14,U23,U24}=ComputeUtilities[X11,\[Beta]11,X13,\[Beta]13,X14,\[Beta]14,X23,\[Beta]23,X24,\[Beta]24];*)
(*(*Calculate probabilities*){pY1_ 0,pY1_ 1_Y2 _ 0,pY1_ 1_Y2 _ 1}=StrategicIndependentProbabilities[U11,U13,U14,U23,U24];*)
(*(*Add to log-likelihood*)If[y1==0,likelihood+=Log[pY1_ 0],If[y2==0,likelihood+=Log[pY1_ 1_Y2 _ 0],likelihood+=Log[pY1_ 1_Y2 _ 1]]],{i,1,Length[data]}];*)
(*likelihood];*)
(**)
(*(*Estimation function for independent strategic model*)*)
(*EstimateStrategicIndependent[data_]:=Module[{k11,k13,k14,k23,k24,initialParams,result},(*Get dimensions of parameter vectors*)k11=Length[data[[1,3]]];(*Number of parameters in \[Beta]11*)k13=Length[data[[1,4]]];(*Number of parameters in \[Beta]13*)k14=Length[data[[1,5]]];(*Number of parameters in \[Beta]14*)k23=Length[data[[1,6]]];(*Number of parameters in \[Beta]23*)k24=Length[data[[1,7]]];(*Number of parameters in \[Beta]24*)(*Initial parameter values*)initialParams=Join[ConstantArray[0,k11],ConstantArray[0,k13],ConstantArray[0,k14],ConstantArray[0,k23],ConstantArray[0,k24]];*)
(*(*Maximize the log-likelihood function*)result=FindMaximum[{StrategicIndependentLikelihood[data,#[[1;;k11]],#[[(k11+1);;(k11+k13)]],#[[(k11+k13+1);;(k11+k13+k14)]],#[[(k11+k13+k14+1);;(k11+k13+k14+k23)]],#[[(k11+k13+k14+k23+1);;(k11+k13+k14+k23+k24)]]]&[{vars}]},{vars,initialParams},Method->"NelderMead"];*)
(*(*Extract estimated parameters*){result[[1]],(*Maximized log-likelihood*){result[[2,1,2,1;;k11]],(*Estimated \[Beta]11*)result[[2,1,2,(k11+1);;(k11+k13)]],(*Estimated \[Beta]13*)result[[2,1,2,(k11+k13+1);;(k11+k13+k14)]],(*Estimated \[Beta]14*)result[[2,1,2,(k11+k13+k14+1);;(k11+k13+k14+k23)]],(*Estimated \[Beta]23*)result[[2,1,2,(k11+k13+k14+k23+1);;(k11+k13+k14+k23+k24)]] (*Estimated \[Beta]24*)}}];*)
(**)
(*(* ========================================================*)*)
(*(*MODEL 3:CORRELATED STRATEGIC MODEL*)*)
(*(* ========================================================*)*)
(**)
(*(*Strategic model with correlated errors*)*)
(*(*Implements Equations 15-17 from Signorino's paper*)*)
(**)
(*(*Helper function to solve Equation 18 for \[CurlyEpsilon]1*)*)
(*SolveForEpsilon1[U11_,U13_,U14_,U23_,U24_,\[Rho]_,\[CurlyEpsilon]1_]:=Module[{Pr_y2 _leq _ 0,Pr_y2 _gt _ 0},(*Calculate conditional probabilities*)Pr_y2 _leq _ 0=CDF[NormalDistribution[\[Rho]*\[CurlyEpsilon]1,Sqrt[1-\[Rho]^2]],U23-U24];*)
(*Pr_y2 _gt _ 0=1-Pr_y2 _leq _ 0;*)
(*(*Equation 18*)Pr_y2 _leq _ 0*U13+Pr_y2 _gt _ 0*U14+\[CurlyEpsilon]1-U11];*)
(**)
(*(*Function to numerically find \[CurlyEpsilon]1\:030a that satisfies Equation 18*)*)
(*FindEpsilon1[U11_,U13_,U14_,U23_,U24_,\[Rho]_]:=Module[{},(*Use FindRoot to solve the equation*)\[CurlyEpsilon]1sol=FindRoot[SolveForEpsilon1[U11,U13,U14,U23,U24,\[Rho],\[CurlyEpsilon]1]==0,{\[CurlyEpsilon]1,0}];*)
(*\[CurlyEpsilon]1sol[[1,2]]];*)
(**)
(*(*Calculate probabilities for correlated strategic model*)*)
(*StrategicCorrelatedProbabilities[U11_,U13_,U14_,U23_,U24_,\[Rho]_]:=Module[{\[CurlyEpsilon]1\:030a},(*Find \[CurlyEpsilon]1\:030a that satisfies Equation 18*)\[CurlyEpsilon]1\:030a=FindEpsilon1[U11,U13,U14,U23,U24,\[Rho]];*)
(*(*Calculate probabilities using Equations 15-17*)pY1_ 0=\[CapitalPhi]N[-\[CurlyEpsilon]1\:030a];*)
(*pY1_ 1_Y2 _ 0=\[CapitalPhi]BN[\[CurlyEpsilon]1\:030a,U23-U24,-\[Rho]];*)
(*pY1_ 1_Y2 _ 1=\[CapitalPhi]BN[\[CurlyEpsilon]1\:030a,U24-U23,\[Rho]];*)
(*(*Return probabilities*){pY1_ 0,pY1_ 1_Y2 _ 0,pY1_ 1_Y2 _ 1}];*)
(**)
(*(*Likelihood function for correlated strategic model*)*)
(*StrategicCorrelatedLikelihood[data_,\[Beta]11_,\[Beta]13_,\[Beta]14_,\[Beta]23_,\[Beta]24_,\[Rho]_]:=Module[{likelihood=0},(*For each observation in data*)Do[(*Extract data*){y1,y2,X11,X13,X14,X23,X24}=data[[i]];*)
(*(*Compute utilities*){U11,U13,U14,U23,U24}=ComputeUtilities[X11,\[Beta]11,X13,\[Beta]13,X14,\[Beta]14,X23,\[Beta]23,X24,\[Beta]24];*)
(*(*Calculate probabilities*){pY1_ 0,pY1_ 1_Y2 _ 0,pY1_ 1_Y2 _ 1}=StrategicCorrelatedProbabilities[U11,U13,U14,U23,U24,\[Rho]];*)
(*(*Add to log-likelihood*)If[y1==0,likelihood+=Log[pY1_ 0],If[y2==0,likelihood+=Log[pY1_ 1_Y2 _ 0],likelihood+=Log[pY1_ 1_Y2 _ 1]]],{i,1,Length[data]}];*)
(*likelihood];*)
(**)
(*(*Estimation function for correlated strategic model*)*)
(*EstimateStrategicCorrelated[data_]:=Module[{k11,k13,k14,k23,k24,initialParams,constraints,result},(*Get dimensions of parameter vectors*)k11=Length[data[[1,3]]];(*Number of parameters in \[Beta]11*)k13=Length[data[[1,4]]];(*Number of parameters in \[Beta]13*)k14=Length[data[[1,5]]];(*Number of parameters in \[Beta]14*)k23=Length[data[[1,6]]];(*Number of parameters in \[Beta]23*)k24=Length[data[[1,7]]];(*Number of parameters in \[Beta]24*)(*Initial parameter values*)initialParams=Join[ConstantArray[0,k11],ConstantArray[0,k13],ConstantArray[0,k14],ConstantArray[0,k23],ConstantArray[0,k24],{0} (*Initial \[Rho]*)];*)
(*(*Constraints on \[Rho]*)constraints={-0.99<=#[[(k11+k13+k14+k23+k24+1)]]<=0.99}&;*)
(*(*Maximize the log-likelihood function*)result=FindMaximum[{StrategicCorrelatedLikelihood[data,#[[1;;k11]],#[[(k11+1);;(k11+k13)]],#[[(k11+k13+1);;(k11+k13+k14)]],#[[(k11+k13+k14+1);;(k11+k13+k14+k23)]],#[[(k11+k13+k14+k23+1);;(k11+k13+k14+k23+k24)]],#[[(k11+k13+k14+k23+k24+1)]]]&[{vars}],constraints[{vars}]},{vars,initialParams},Method->"NelderMead"];*)
(*(*Extract estimated parameters*){result[[1]],(*Maximized log-likelihood*){result[[2,1,2,1;;k11]],(*Estimated \[Beta]11*)result[[2,1,2,(k11+1);;(k11+k13)]],(*Estimated \[Beta]13*)result[[2,1,2,(k11+k13+1);;(k11+k13+k14)]],(*Estimated \[Beta]14*)result[[2,1,2,(k11+k13+k14+1);;(k11+k13+k14+k23)]],(*Estimated \[Beta]23*)result[[2,1,2,(k11+k13+k14+k23+1);;(k11+k13+k14+k23+k24)]],(*Estimated \[Beta]24*)result[[2,1,2,(k11+k13+k14+k23+k24+1)]] (*Estimated \[Rho]*)}}];*)
(**)
(*(* ========================================================*)*)
(*(*MONTE CARLO ANALYSIS FUNCTIONS*)*)
(*(* ========================================================*)*)
(**)
(*(*Function to generate data from the correlated strategic model*)*)
(*GenerateCorrelatedStrategicData[\[Beta]13_,\[Beta]14_,\[Beta]24_,\[Rho]_,N_,varRatio_]:=Module[{data,X13,X14,X24,\[CurlyEpsilon]1,\[CurlyEpsilon]2,U11,U13,U14,U23,U24,y1star,y2star,y1,y2},data={};*)
(*Do[(*Generate regressors with specified variance ratio*)X13=RandomReal[{-Sqrt[3*varRatio],Sqrt[3*varRatio]},Length[\[Beta]13]];*)
(*X14=RandomReal[{-Sqrt[3*varRatio],Sqrt[3*varRatio]},Length[\[Beta]14]];*)
(*X24=RandomReal[{-Sqrt[3*varRatio],Sqrt[3*varRatio]},Length[\[Beta]24]];*)
(*(*Generate correlated errors*){\[CurlyEpsilon]1,\[CurlyEpsilon]2}=RandomVariate[BinormalDistribution[{0,0},{1,1},\[Rho]]];*)
(*(*Calculate utilities*)U11=0;(*As specified in Signorino's paper,Equation 19*)U13=X13 . \[Beta]13;*)
(*U14=X14 . \[Beta]14;*)
(*U23=0;(*As specified in Signorino's paper,Equation 22*)U24=X24 . \[Beta]24;*)
(*(*Calculate latent variables*)(*First solve for \[CurlyEpsilon]1\:030a*)\[CurlyEpsilon]1\:030a=FindEpsilon1[U11,U13,U14,U23,U24,\[Rho]];*)
(*(*Determine outcomes*)If[\[CurlyEpsilon]1>\[CurlyEpsilon]1\:030a,y1=1;*)
(*y2star=U24-U23+\[CurlyEpsilon]2;*)
(*If[y2star>0,y2=1,y2=0],y1=0;*)
(*y2=-1  (*Placeholder for unobserved y2*)];*)
(*(*Add observation to dataset*)If[y1==0,AppendTo[data,{y1,y2,X13,X14,X24}],AppendTo[data,{y1,y2,X13,X14,X24}]],{N}];*)
(*data];*)
(**)
(*(*Function to calculate average model distances*)*)
(*CalculateModelDistances[\[Beta]13_,\[Beta]14_,\[Beta]24_,\[Rho]_,varRatio_,gridSize_]:=Module[{gridPoints,bivariateDistances,independentDistances,distances},(*Create grid of points in regressor space*)gridPoints=Flatten[Table[{x13,x14,x24},{x13,-Sqrt[3*varRatio],Sqrt[3*varRatio],2*Sqrt[3*varRatio]/gridSize},{x14,-Sqrt[3*varRatio],Sqrt[3*varRatio],2*Sqrt[3*varRatio]/gridSize},{x24,-Sqrt[3*varRatio],Sqrt[3*varRatio],2*Sqrt[3*varRatio]/gridSize}],2];*)
(*(*Calculate distances at each grid point*)distances=ParallelTable[Module[{X13,X14,X24,U11,U13,U14,U23,U24,correlated,bivariate,independent,bivariateDistance,independentDistance},X13={1,gridPoints[[i,1]]};*)
(*X14={1,gridPoints[[i,2]]};*)
(*X24={1,gridPoints[[i,3]]};*)
(*(*Compute utilities*)U11=0;*)
(*U13=X13 . \[Beta]13;*)
(*U14=X14 . \[Beta]14;*)
(*U23=0;*)
(*U24=X24 . \[Beta]24;*)
(*(*Calculate probabilities for each model*)correlated=StrategicCorrelatedProbabilities[U11,U13,U14,U23,U24,\[Rho]];*)
(*(*For bivariate probit,we need to map to X1\[Beta]1 and X2\[Beta]2*)X1\[Beta]1=U13-U11;(*Simplified for illustration*)X2\[Beta]2=U24-U23;*)
(*bivariate=BivariateProbabilities[X1\[Beta]1,{1},X2\[Beta]2,{1},\[Rho]];*)
(*independent=StrategicIndependentProbabilities[U11,U13,U14,U23,U24];*)
(*(*Calculate Euclidean distances*)bivariateDistance=Norm[correlated-bivariate];*)
(*independentDistance=Norm[correlated-independent];*)
(*{bivariateDistance,independentDistance}],{i,1,Length[gridPoints]}];*)
(*(*Compute average distances*)bivariateDistances=Mean[distances[[All,1]]];*)
(*independentDistances=Mean[distances[[All,2]]];*)
(*{bivariateDistances,independentDistances}];*)
(**)
(*(*Function to run Monte Carlo analysis*)*)
(*RunMonteCarloAnalysis[correlationLevels_,varianceRatios_,samplesPerConfig_]:=Module[{results},results=Table[Module[{\[Beta]13,\[Beta]14,\[Beta]24,data,bivariateParams,independentParams,correlatedParams,bivariate\[Rho],distances},(*Parameters as in Signorino's paper*)\[Beta]13={1,1};*)
(*\[Beta]14={1,1};*)
(*\[Beta]24={1,1};*)
(*(*Generate data*)data=GenerateCorrelatedStrategicData[\[Beta]13,\[Beta]14,\[Beta]24,\[Rho],2000,varRatio];*)
(*(*Estimate parameters for each model*)bivariateParams=EstimateBivariateProbit[data];*)
(*independentParams=EstimateStrategicIndependent[data];*)
(*correlatedParams=EstimateStrategicCorrelated[data];*)
(*(*Extract estimated \[Rho] from bivariate model*)bivariate\[Rho]=bivariateParams[[2,3]];*)
(*(*Calculate average distances*)distances=CalculateModelDistances[\[Beta]13,\[Beta]14,\[Beta]24,\[Rho],varRatio,10];*)
(*(*Return results*){"\[Rho]"->\[Rho],"VarianceRatio"->varRatio,"Bivariate\[Rho]Estimate"->bivariate\[Rho],"BivariateModelDistance"->distances[[1]],"IndependentModelDistance"->distances[[2]]}],{\[Rho],correlationLevels},{varRatio,varianceRatios},{sample,1,samplesPerConfig}];*)
(*(*Average over samples*)results=Mean[results,{3}];*)
(*results];*)
(**)
(*(* ========================================================*)*)
(*(*PLOT FUNCTIONS FOR VISUALIZING RESULTS*)*)
(*(* ========================================================*)*)
(**)
(*(*Function to plot distance comparison as in Figure 6a*)*)
(*PlotDistanceComparison[results_]:=Module[{correlationLevels,varianceRatios,bivariateDistances,independentDistances,bivariateData,independentData,plotRanges},(*Extract parameters*)correlationLevels=DeleteDuplicates[results[[All,All,1,2]]];*)
(*varianceRatios=DeleteDuplicates[results[[All,All,2,2]]];*)
(*(*Extract distances*)bivariateDistances=Table[results[[i,j,4,2]],{i,Length[correlationLevels]},{j,Length[varianceRatios]}];*)
(*independentDistances=Table[results[[i,j,5,2]],{i,Length[correlationLevels]},{j,Length[varianceRatios]}];*)
(*(*Prepare plot data*)bivariateData=Flatten[Table[{Log[varianceRatios[[j]]],bivariateDistances[[i,j]],correlationLevels[[i]]},{i,Length[correlationLevels]},{j,Length[varianceRatios]}],1];*)
(*independentData=Flatten[Table[{Log[varianceRatios[[j]]],independentDistances[[i,j]],correlationLevels[[i]]},{i,Length[correlationLevels]},{j,Length[varianceRatios]}],1];*)
(*(*Create plot*)plotRanges={{Min[Log[varianceRatios]],Max[Log[varianceRatios]]},{0,Max[Max[bivariateDistances],Max[independentDistances]]*1.1}};*)
(*Show[(*Bivariate probit model*)ListLinePlot[GatherBy[bivariateData,Last],PlotStyle->{Red,Blue,Green},PlotLegends->Map[StringForm["Bivariate \[Rho] = ``",#]&,correlationLevels],PlotMarkers->{Automatic,10},PlotRange->plotRanges,AxesLabel->{"Log[V(U)/V(\[CurlyEpsilon])]","Average Deviation"},PlotLabel->"Comparison of Model Deviations"],(*Independent strategic model*)ListLinePlot[GatherBy[independentData,Last],PlotStyle->{Red,Blue,Green,Dashed},PlotLegends->Map[StringForm["Independent \[Rho] = ``",#]&,correlationLevels],PlotMarkers->{Automatic,10}]]];*)
(**)
(*(*Function to plot nonmonotonicity as in Figure 6b*)*)
(*PlotNonmonotonicity[X13_,X14_,\[Beta]13_,\[Beta]14_,\[Beta]24_,\[Rho]_]:=Module[{X24values,probsCorrelated,probsIndependent,probsBivariate},(*Create range of X24 values*)X24values=Range[-3,3,0.1];*)
(*(*Calculate probabilities for correlated strategic model*)probsCorrelated=ParallelTable[StrategicCorrelatedProbabilities[0,X13 . \[Beta]13,X14 . \[Beta]14,0,{1,x} . \[Beta]24,\[Rho]][[3]],{x,X24values}];*)
(*(*Calculate probabilities for independent strategic model*)probsIndependent=ParallelTable[StrategicIndependentProbabilities[0,X13 . \[Beta]13,X14 . \[Beta]14,0,{1,x} . \[Beta]24][[3]],{x,X24values}];*)
(*(*Calculate probabilities for bivariate probit model*)probsBivariate=ParallelTable[Module[{X1\[Beta]1,X2\[Beta]2},X1\[Beta]1=X13 . \[Beta]13-0;(*Simplified for illustration*)X2\[Beta]2={1,x} . \[Beta]24-0;*)
(*BivariateProbabilities[X1\[Beta]1,{1},X2\[Beta]2,{1},\[Rho]][[3]]],{x,X24values}];*)
(*(*Create plot*)ListLinePlot[{Transpose[{X24values,probsCorrelated}],Transpose[{X24values,probsIndependent}],Transpose[{X24values,probsBivariate}]},PlotStyle->{Red,Blue,Green},PlotLegends->{"Correlated Strategic","Independent Strategic","Bivariate Probit"},AxesLabel->{"X24","Pr(y1=1, y2=1)"},PlotLabel->"Nonmonotonicity in Strategic Models"]];*)
(**)
(*(* ========================================================*)*)
(*(*EXAMPLE USAGE*)*)
(*(* ========================================================*)*)
(**)
(*(*Example:Run a Monte Carlo analysis*)*)
(*correlationLevels={0,0.5,0.9};*)
(*varianceRatios={1/10,1/3,1,3,10};*)
(*results=RunMonteCarloAnalysis[correlationLevels,varianceRatios,5];*)
(**)
(*(*Plot distance comparison*)*)
(*PlotDistanceComparison[results]*)
(**)
(*(*Plot nonmonotonicity example*)*)
(*X13={1,1.5};*)
(*X14={1,-1.5};*)
(*\[Beta]13={1,1};*)
(*\[Beta]14={1,1};*)
(*\[Beta]24={1,1};*)
(*\[Rho]=0.5;*)
(*PlotNonmonotonicity[X13,X14,\[Beta]13,\[Beta]14,\[Beta]24,\[Rho]]*)
